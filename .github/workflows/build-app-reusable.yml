name: build-app-reusable

on:
  workflow_call:
    inputs:
      if:
        description: 'Whether to run this job'
        required: false
        default: true
        type: boolean
      runs-on:
        description: 'The type of machine to run the job on'
        required: false
        default: 'macos-12'
        type: string
      scheme:
        required: true
        type: string
      destination:
        required: false
        default: 'generic/platform=iOS'
        type: string
      uploadType:
        required: false
        default: 'macos'
        type: string
      packageExtension:
        required: false
        default: '.pkg'
        type: string
      buildConfigName:
        required: false
        default: 'DeveloperID' # 'AppStore' or 'DeveloperID'
        type: string
      projectKind:
        required: false
        default: 'DeveloperID' # 'AppStore' or 'DeveloperID'
        type: string
      exportOptionsPlist:
        required: false
        default: 'dist/developer-id-exportOptions.plist' # 'dist/app-store-exportOptions.plist' or 'dist/developer-id-exportOptions.plist'
        type: string
    secrets:
      APP_STORE_AUTHENTICATION_KEY_BASE64:
        required: true
      APP_STORE_AUTHENTICATION_KEY_ID:
        required: true
      APP_STORE_AUTHENTICATION_KEY_ISSUER_ID:
        required: true
      KEYCHAIN_PASSWORD:
        required: true
      P12_PASSWORD:
        required: true
      APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64:
        required: true
      BUILD_CERTIFICATE_BASE64:
        required: true
      EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64:
        required: true

defaults:
  run:
    shell: bash {0}

jobs:
  build-app:
    if: ${{ inputs.if }}
    runs-on: ${{ inputs.runs-on }}

    env:
      APP_STORE_AUTHENTICATION_KEY_BASE64: ${{ secrets.APP_STORE_AUTHENTICATION_KEY_BASE64 }}
      APP_STORE_AUTHENTICATION_KEY_ID: ${{ secrets.APP_STORE_AUTHENTICATION_KEY_ID }}
      APP_STORE_AUTHENTICATION_KEY_ISSUER_ID: ${{ secrets.APP_STORE_AUTHENTICATION_KEY_ISSUER_ID }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      KEYCHAIN_NAME: app-signing.keychain-db

    steps:
      - name: ACT preamble
        if: ${{ env.ACT }}
        shell: /bin/bash --noprofile --norc -x -euo pipefail {0}
        run: |
          ./GHALocal/bin/gh-runner-host-preamble

      - name: Dump GitHub Action Properties
        if: ${{ !env.ACT }}
        run: |
          echo "github.event_name: ${{ github.event_name }}"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Dump Environment
        run: |
          env | sort
          git --no-pager log -10 --pretty=format:"%h %ad %an %s"

      - name: Setup Environment
        run: |
          echo 'PRODUCT_NAME=${{ inputs.scheme }}' >> $GITHUB_ENV
          echo "DERIVED_DATA_PATH=$RUNNER_TEMP/build.derivedData" >> $GITHUB_ENV
          echo "EXPORT_PATH=$RUNNER_TEMP/build.export" >> $GITHUB_ENV
          echo "AUTHENTICATION_KEY_PATH=$RUNNER_TEMP/authentication.p8" >> $GITHUB_ENV

      - uses: maxim-lobanov/setup-xcode@v1.4.1
        if: ${{ !env.ACT }}
        with:
          xcode-version: '13.4'

      - name: Install Brew
        if: ${{ env.ACT }}
        run: |
          ./GHAShortcuts/InstallBrew

      - name: Install Dependencies
        run: |
          ./GHAShortcuts/InstallDependencies
          ./GHAShortcuts/InstallDependencies-build-app

      - name: Cache Mint packages
        id: mint-cache
        uses: actions/cache@v2
        with:
          path: ~/.mint
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: ${{ runner.os }}-mint-

      - name: Install Mint packages
        if: steps.mint-cache.outputs.cache-hit != 'true'
        run: mint bootstrap

      - name: Install App Store Connect API Key
        run: |
          echo -n "$APP_STORE_AUTHENTICATION_KEY_BASE64" | base64 --decode --output "$AUTHENTICATION_KEY_PATH"

      - name: Setup Version Dependent Environment
        run: |
          # Create variables
          BUNDLE_VERSION=$(GHAScripts/BundleVersion)

          echo "BUNDLE_VERSION=$BUNDLE_VERSION" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$PRODUCT_NAME" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=$RUNNER_TEMP/$PRODUCT_NAME-$BUNDLE_VERSION-${{ inputs.buildConfigName }}.xcarchive" >> $GITHUB_ENV
          echo "DMG_PATH=$RUNNER_TEMP/$PRODUCT_NAME-$BUNDLE_VERSION.dmg" >> $GITHUB_ENV

      - name: Create Keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          KEYCHAIN_PATH="$RUNNER_TEMP"/"$KEYCHAIN_NAME"

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

      - name: Install certificates
        env:
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64: ${{ secrets.APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64 }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          EXPORT_CERTIFICATE_BASE64: ${{ secrets.EXPORT_CERTIFICATE_BASE64 }}
          EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64: ${{ secrets.EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64 }}
        run: |
          # create variables
          KEYCHAIN_PATH="$RUNNER_TEMP"/app-signing.keychain-db
          APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH="$RUNNER_TEMP"/apple_wwdr_ca.cer
          BUILD_CERTIFICATE_PATH="$RUNNER_TEMP"/build_certificate.p12
          EXPORT_CERTIFICATE_PATH="$RUNNER_TEMP"/export_certificate.p12
          EXPORT_CERTIFICATE_DEVELOPER_ID_PATH="$RUNNER_TEMP"/export_certificate_developer_id.p12

          # import certificate from secrets
          echo -n "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64" | base64 --decode --output "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH"
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output "$BUILD_CERTIFICATE_PATH"
          echo -n "$EXPORT_CERTIFICATE_BASE64" | base64 --decode --output "$EXPORT_CERTIFICATE_PATH"
          echo -n "$EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64" | base64 --decode --output "$EXPORT_CERTIFICATE_DEVELOPER_ID_PATH"

          # import certificate to keychain
          security import "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH" -k "$KEYCHAIN_PATH"
          security import "$BUILD_CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security import "$EXPORT_CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security import "$EXPORT_CERTIFICATE_DEVELOPER_ID_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"

      - name: Erase profiles remaining from previous builds
        run: |
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles
      
      - uses: actions/cache@v2
        if: ${{ false }}
        with:
          path: ${{ env.DERIVED_DATA_PATH }}/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('*.xcodeproj/**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: XcodeGen
        run: |
          mint run xcodegen -s XcodeGen/Variant/${{ inputs.projectKind }}.yml -r . -p Xcodeproj

      - name: Build .xcarchive
        run: |
          # build
          . ./Commands/Xcodebuild-env.sh
          xcodebuild archive \
            -project Xcodeproj/*-${{ inputs.projectKind }}.xcodeproj \
            -derivedDataPath "$DERIVED_DATA_PATH" \
            -disableAutomaticPackageResolution \
            -onlyUsePackageVersionsFromResolvedFile \
            -archivePath "$ARCHIVE_PATH" \
            -scheme '${{ inputs.scheme }}' \
            -destination '${{ inputs.destination }}' \
            -showBuildTimingSummary \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$AUTHENTICATION_KEY_PATH" \
            -authenticationKeyID "$APP_STORE_AUTHENTICATION_KEY_ID" \
            -authenticationKeyIssuerID "$APP_STORE_AUTHENTICATION_KEY_ISSUER_ID" \
            BUNDLE_VERSION="$BUNDLE_VERSION" \
            | xcpretty
          ./GHAShortcuts/gh-tar "$(dirname "$ARCHIVE_PATH")" "$ARCHIVE_PATH"

      - name: Pull .xcarchive
        if: ${{ env.ACT }}
        shell: bash --noprofile --norc -x -euo pipefail {0}
        run: |
          scp -pr "$REMOTE_RUNNER_USER"@host.docker.internal:"$ARCHIVE_PATH".tar "$ARCHIVE_PATH".tar

      - name: Save .xcarchive
        uses: actions/upload-artifact@v2
        with:
          name: xcarchive-${{ inputs.buildConfigName }}
          if-no-files-found: error
          path: |
            ${{ env.ARCHIVE_PATH }}.tar

      - name: Export archive
        run: |
          # create variables
          EXPORT_OPTIONS_PLIST='${{ inputs.exportOptionsPlist }}'

          # export archive
          xcodebuild \
            -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "$EXPORT_OPTIONS_PLIST" \
            -exportPath "$EXPORT_PATH" \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$AUTHENTICATION_KEY_PATH" \
            -authenticationKeyID "$APP_STORE_AUTHENTICATION_KEY_ID" \
            -authenticationKeyIssuerID "$APP_STORE_AUTHENTICATION_KEY_ISSUER_ID"

      - name: Create .dmg
        if: ${{ inputs.buildConfigName == 'DeveloperID' }}
        run: |
          # Create .dmg
          hdiutil create \
              -volname '${{ inputs.scheme }}' \
              -srcfolder "$EXPORT_PATH" \
              -ov \
              -format UDZO \
              "$DMG_PATH"

      - name: Pull .dmg
        if: ${{ env.ACT && inputs.buildConfigName == 'DeveloperID' }}
        shell: bash --noprofile --norc -x -euo pipefail {0}
        run: |
          scp -pr "$REMOTE_RUNNER_USER"@host.docker.internal:"$DMG_PATH" "$DMG_PATH"
          
      - name: Save .dmg
        if: ${{ inputs.buildConfigName == 'DeveloperID' }}
        uses: actions/upload-artifact@v2
        with:
          name: dmg
          if-no-files-found: error
          path: |
            ${{ env.DMG_PATH }}

      - name: Upload to TestFlight
        if: ${{ !env.ACT && inputs.buildConfigName == 'AppStore' }}
        run: |
          # create variables
          API_KEY_NAME="$APP_STORE_AUTHENTICATION_KEY_ID"
          API_PRIVATE_KEYS_DIR="$RUNNER_TEMP/private_keys"
          EXPORT_PATH="$RUNNER_TEMP"/build.export

          # populate private keys directory
          mkdir -p "$API_PRIVATE_KEYS_DIR"
          echo -n "$APP_STORE_AUTHENTICATION_KEY_BASE64" | base64 --decode --output "$API_PRIVATE_KEYS_DIR/AuthKey_$API_KEY_NAME.p8"

          # upload .ipa
          ls -l "$API_PRIVATE_KEYS_DIR"
          ls -l "$EXPORT_PATH"
          env API_PRIVATE_KEYS_DIR="$API_PRIVATE_KEYS_DIR" \
            xcrun altool \
            --upload-app \
            --type ${{ inputs.uploadType }} \
            --file "$EXPORT_PATH"/*${{ inputs.packageExtension }} \
            --apiKey "$API_KEY_NAME" \
            --apiIssuer "$APP_STORE_AUTHENTICATION_KEY_ISSUER_ID"

      - name: ACT epilogue
        if: ${{ env.ACT && always() }}
        shell: /bin/bash --noprofile --norc -x -euo pipefail {0}
        run: |
          ./GHALocal/bin/gh-runner-host-epilogue
