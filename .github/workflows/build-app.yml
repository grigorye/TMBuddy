name: build-app

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

defaults:
  run:
    shell: bash --noprofile --norc -x -euo pipefail {0}

jobs:
  build:
    name: ${{ matrix.run-config.scheme }}
    runs-on: macos-11
    strategy:
      matrix:
        run-config:
          - scheme: 'TMBuddy'
            destination: 'generic/platform=macOS'
            exportOptionsPlist: 'dist/appstore-exportOptions.plist'
            uploadType: 'macos'
            packageExtension: '.pkg'
    env:
      APP_STORE_AUTHENTICATION_KEY_BASE64: ${{ secrets.APP_STORE_AUTHENTICATION_KEY_BASE64 }}
      APP_STORE_AUTHENTICATION_KEY_ID: ${{ secrets.APP_STORE_AUTHENTICATION_KEY_ID }}
      APP_STORE_AUTHENTICATION_KEY_ISSUER_ID: ${{ secrets.APP_STORE_AUTHENTICATION_KEY_ISSUER_ID }}
    
    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    
    - name: Dump Environment
      run: |
        env | sort
        git log

    - name: Setup Environment
      run: |
        echo 'PRODUCT_NAME=${{ matrix.run-config.scheme }}' >> $GITHUB_ENV
        echo 'DERIVED_DATA_PATH=${{ runner.temp }}/build.derivedData' >> $GITHUB_ENV
        echo 'EXPORT_PATH_APPSTORE=${{ runner.temp }}/build.export/appstore' >> $GITHUB_ENV
        echo 'EXPORT_PATH_DEVELOPER_ID=${{ runner.temp }}/build.export/developer-id' >> $GITHUB_ENV
        echo 'AUTHENTICATION_KEY_PATH=${{ runner.temp }}/authentication.p8' >> $GITHUB_ENV
        echo 'ARCHIVE_ARTIFACT_PATH=${{ runner.temp }}/xcarchive' >> $GITHUB_ENV
        echo 'ARCHIVE_ARTIFACT_PATH_APPSTORE=${{ runner.temp }}/xcarchive-appstore' >> $GITHUB_ENV

    - uses: maxim-lobanov/setup-xcode@v1.4.1
      with:
        xcode-version: '13.2.1'
    
    - name: Install App Store Connect API Key
      run: |
        echo -n "$APP_STORE_AUTHENTICATION_KEY_BASE64" | base64 --decode --output "$AUTHENTICATION_KEY_PATH"
    
    - name: Setup Version Dependent Environment
      run: |
        # Create variables
        BUNDLE_VERSION=$(GHAScripts/BundleVersion)

        echo "BUNDLE_VERSION=$BUNDLE_VERSION" >> $GITHUB_ENV
        echo "PRODUCT_NAME=$PRODUCT_NAME" >> $GITHUB_ENV
        echo "ARCHIVE_PATH=$ARCHIVE_ARTIFACT_PATH/$PRODUCT_NAME-$BUNDLE_VERSION.xcarchive" >> $GITHUB_ENV
        echo "ARCHIVE_PATH_APPSTORE=$ARCHIVE_ARTIFACT_PATH_APPSTORE/$PRODUCT_NAME-appstore-$BUNDLE_VERSION.xcarchive" >> $GITHUB_ENV
        echo "DMG_PATH=$RUNNER_TEMP/$PRODUCT_NAME-$BUNDLE_VERSION.dmg" >> $GITHUB_ENV
    
    - name: Create Keychain
      env:
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        KEYCHAIN_PATH="$RUNNER_TEMP"/app-signing.keychain-db

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security list-keychain -d user -s "$KEYCHAIN_PATH"

    - name: Install certificates
      env:
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64: ${{ secrets.APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64 }}
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        EXPORT_CERTIFICATE_BASE64: ${{ secrets.EXPORT_CERTIFICATE_BASE64 }}
        EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64: ${{ secrets.EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64 }}
      run: |
        # create variables
        KEYCHAIN_PATH="$RUNNER_TEMP"/app-signing.keychain-db
        APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH="$RUNNER_TEMP"/apple_wwdr_ca.cer
        BUILD_CERTIFICATE_PATH="$RUNNER_TEMP"/build_certificate.p12
        EXPORT_CERTIFICATE_PATH="$RUNNER_TEMP"/export_certificate.p12
        EXPORT_CERTIFICATE_DEVELOPER_ID_PATH="$RUNNER_TEMP"/export_certificate_developer_id.p12

        # import certificate from secrets
        echo -n "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64" | base64 --decode --output "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH"
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output "$BUILD_CERTIFICATE_PATH"
        echo -n "$EXPORT_CERTIFICATE_BASE64" | base64 --decode --output "$EXPORT_CERTIFICATE_PATH"
        echo -n "$EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64" | base64 --decode --output "$EXPORT_CERTIFICATE_DEVELOPER_ID_PATH"

        # import certificate to keychain
        security import "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH" -k "$KEYCHAIN_PATH"
        security import "$BUILD_CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
        security import "$EXPORT_CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
        security import "$EXPORT_CERTIFICATE_DEVELOPER_ID_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"

    - name: Erase profiles remaining from previous builds
      run: |
        rm -rf ~/Library/MobileDevice/Provisioning\ Profiles

    - uses: actions/cache@v2
      with:
        path: ${{ env.DERIVED_DATA_PATH }}/SourcePackages
        key: ${{ runner.os }}-spm-${{ hashFiles('*.xcodeproj/**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Build .xcarchive
      run: |
        # build
        xcodebuild archive \
          -derivedDataPath "$DERIVED_DATA_PATH" \
          -archivePath "$ARCHIVE_PATH" \
          -scheme '${{ matrix.run-config.scheme }}' \
          -destination '${{ matrix.run-config.destination }}' \
          -showBuildTimingSummary \
          -allowProvisioningUpdates \
          -authenticationKeyPath "$AUTHENTICATION_KEY_PATH" \
          -authenticationKeyID "$APP_STORE_AUTHENTICATION_KEY_ID" \
          -authenticationKeyIssuerID "$APP_STORE_AUTHENTICATION_KEY_ISSUER_ID" \
          BUNDLE_VERSION="$BUNDLE_VERSION" \
          GE_INFOPLIST_KIND=Distribution \
          GE_APP_ENTITLEMENTS_SUFFIX=-appstore

    - name: Save .xcarchive
      uses: actions/upload-artifact@v2
      with:
        name: xcarchive
        path: |
          ${{ env.ARCHIVE_ARTIFACT_PATH }}

    - name: Export archive for AppStore
      if: github.ref == 'refs/heads/main'
      run: |
        # create variables
        EXPORT_OPTIONS_PLIST='dist/appstore-exportOptions.plist'
        
        # export archive
        xcodebuild \
          -exportArchive \
          -archivePath "$ARCHIVE_PATH_APPSTORE" \
          -exportOptionsPlist "$EXPORT_OPTIONS_PLIST" \
          -exportPath "$EXPORT_PATH_APPSTORE" \
          -allowProvisioningUpdates \
          -authenticationKeyPath "$AUTHENTICATION_KEY_PATH" \
          -authenticationKeyID "$APP_STORE_AUTHENTICATION_KEY_ID" \
          -authenticationKeyIssuerID "$APP_STORE_AUTHENTICATION_KEY_ISSUER_ID"
    
    - name: Export archive for Developer ID
      run: |
        # create variables
        EXPORT_OPTIONS_PLIST='dist/developer-id-exportOptions.plist'

        # export archive
        xcodebuild \
          -exportArchive \
          -archivePath "$ARCHIVE_PATH" \
          -exportOptionsPlist "$EXPORT_OPTIONS_PLIST" \
          -exportPath "$EXPORT_PATH_DEVELOPER_ID" \
          -allowProvisioningUpdates \
          -authenticationKeyPath "$AUTHENTICATION_KEY_PATH" \
          -authenticationKeyID "$APP_STORE_AUTHENTICATION_KEY_ID" \
          -authenticationKeyIssuerID "$APP_STORE_AUTHENTICATION_KEY_ISSUER_ID"
        
        # Create .dmg
        hdiutil create \
            -volname '${{ matrix.run-config.scheme }}' \
            -srcfolder "$EXPORT_PATH_DEVELOPER_ID" \
            -ov \
            -format UDZO \
            "$DMG_PATH"
    
    - name: Save .dmg
      uses: actions/upload-artifact@v2
      with:
        name: dmg
        path: |
          ${{ env.DMG_PATH }}
    
    - name: Upload to TestFlight
      if: github.ref == 'refs/heads/main'
      run: |
        # create variables
        API_KEY_NAME="$APP_STORE_AUTHENTICATION_KEY_ID"
        API_PRIVATE_KEYS_DIR="$RUNNER_TEMP/private_keys"
        EXPORT_PATH="$RUNNER_TEMP"/build.export

        # populate private keys directory
        mkdir -p "$API_PRIVATE_KEYS_DIR"
        echo -n "$APP_STORE_AUTHENTICATION_KEY_BASE64" | base64 --decode --output "$API_PRIVATE_KEYS_DIR/AuthKey_$API_KEY_NAME.p8"

        # upload .ipa
        ls -l "$API_PRIVATE_KEYS_DIR"
        ls -l "$EXPORT_PATH_APPSTORE"
        env API_PRIVATE_KEYS_DIR="$API_PRIVATE_KEYS_DIR" \
          xcrun altool \
          --upload-app \
          --type ${{ matrix.run-config.uploadType }} \
          --file "$EXPORT_PATH_APPSTORE"/*${{ matrix.run-config.packageExtension }} \
          --apiKey "$API_KEY_NAME" \
          --apiIssuer "$APP_STORE_AUTHENTICATION_KEY_ISSUER_ID"
