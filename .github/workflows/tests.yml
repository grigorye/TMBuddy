name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

defaults:
  run:
    shell: bash --noprofile --norc -x -euo pipefail {0}

jobs:
  tests:
    name: 'Tests'
    runs-on: macos-12

    env:
      PROJECT_KIND: 'DeveloperID'
      RUN_STAMP: ${{ github.run_id }}.${{ github.run_attempt }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Dump Environment
        run: |
          env | sort
          git --no-pager log -10 --pretty=format:"%h %ad %an %s"

      - name: Setup Environment
        run: |
          echo 'DERIVED_DATA_PATH=${{ runner.temp }}/build.derivedData' >> $GITHUB_ENV
          echo 'XCRESULTS_DIRECTORY=${{ runner.temp }}' >> $GITHUB_ENV
          echo 'REGENERATED_SNAPSHOTS_ARCHIVE=${{ runner.temp }}/Regenerated-Snapshots.${{ env.RUN_STAMP }}.tar.gz' >> $GITHUB_ENV

      - uses: maxim-lobanov/setup-xcode@v1.4.1
        with:
          xcode-version: '13.4'

      - name: Create Keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          KEYCHAIN_PATH="$RUNNER_TEMP"/app-signing.keychain-db

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

      - name: Install certificates
        env:
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64: ${{ secrets.APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64 }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          EXPORT_CERTIFICATE_BASE64: ${{ secrets.EXPORT_CERTIFICATE_BASE64 }}
          EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64: ${{ secrets.EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64 }}
        run: |
          # create variables
          KEYCHAIN_PATH="$RUNNER_TEMP"/app-signing.keychain-db
          APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH="$RUNNER_TEMP"/apple_wwdr_ca.cer
          BUILD_CERTIFICATE_PATH="$RUNNER_TEMP"/build_certificate.p12
          EXPORT_CERTIFICATE_PATH="$RUNNER_TEMP"/export_certificate.p12
          EXPORT_CERTIFICATE_DEVELOPER_ID_PATH="$RUNNER_TEMP"/export_certificate_developer_id.p12

          # import certificate from secrets
          echo -n "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_BASE64" | base64 --decode --output "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH"
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output "$BUILD_CERTIFICATE_PATH"
          echo -n "$EXPORT_CERTIFICATE_BASE64" | base64 --decode --output "$EXPORT_CERTIFICATE_PATH"
          echo -n "$EXPORT_CERTIFICATE_DEVELOPER_ID_BASE64" | base64 --decode --output "$EXPORT_CERTIFICATE_DEVELOPER_ID_PATH"

          # import certificate to keychain
          security import "$APPLE_WWDR_CERTIFICATION_AUTHORITY_CER_PATH" -k "$KEYCHAIN_PATH"
          security import "$BUILD_CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security import "$EXPORT_CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security import "$EXPORT_CERTIFICATE_DEVELOPER_ID_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"

      - name: Erase profiles remaining from previous builds
        run: |
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: actions/cache@v2
        if: ${{ false }}
        with:
          path: ${{ env.DERIVED_DATA_PATH }}/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('*.xcodeproj/**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: XcodeGen
        uses: grigorye/xcodegen-action@feature/projectRoot
        with:
          spec: XcodeGen/Variant/${{ env.PROJECT_KIND }}.yml
          project: Xcodeproj
          project-root: .
          version: '2.26.0'

      - name: Build All
        run: |
          . ./Commands/Xcodebuild-env.sh
          xcodebuild \
            build \
            -project Xcodeproj/*-"$PROJECT_KIND".xcodeproj \
            -derivedDataPath "$DERIVED_DATA_PATH" \
            -disableAutomaticPackageResolution \
            -scheme 'TMBuddyAll' \
            | xcpretty

      - name: Tests
        continue-on-error: true
        run: |
          . ./Commands/Xcodebuild-env.sh
          testExitCode=0
          xcodebuild \
            test \
            -project Xcodeproj/*-"$PROJECT_KIND".xcodeproj \
            -derivedDataPath "$DERIVED_DATA_PATH" \
            -disableAutomaticPackageResolution \
            -scheme 'TMBuddyTests' \
            | xcpretty \
            || testExitCode=${PIPESTATUS[0]}
          echo "$testExitCode" > "$XCRESULTS_DIRECTORY"/TMBuddyTests.exit-code

      - name: Exit on Tests Malfunction
        run: |
          testExitCode=$(cat "$XCRESULTS_DIRECTORY"/TMBuddyTests.exit-code)
          [ "$testExitCode" -eq 0 ] || [ "$testExitCode" -eq 65 ] || exit "$testExitCode"
        
      - name: Snapshots
        continue-on-error: true
        run: |
          SNAPSHOTS_XCRESULT="$XCRESULTS_DIRECTORY"/TMBuddySnapshots.xcresult
          echo "SNAPSHOTS_XCRESULT=$SNAPSHOTS_XCRESULT" >> $GITHUB_ENV

          . ./Commands/Xcodebuild-env.sh
          testExitCode=0
          xcodebuild test \
            -project Xcodeproj/*-"$PROJECT_KIND".xcodeproj \
            -derivedDataPath "$DERIVED_DATA_PATH" \
            -disableAutomaticPackageResolution \
            -scheme 'TMBuddySnapshots' \
            -resultBundlePath "$SNAPSHOTS_XCRESULT" \
            | xcpretty \
            || testExitCode=${PIPESTATUS[0]}
          echo "$testExitCode" > "$XCRESULTS_DIRECTORY"/TMBuddySnapshots.exit-code
          ./GHAShortcuts/gh-tar "$(dirname "$SNAPSHOTS_XCRESULT")" "$SNAPSHOTS_XCRESULT"
          exit "$testExitCode"

      - name: Exit on Snapshots Malfunction
        run: |
          testExitCode=$(cat "$XCRESULTS_DIRECTORY"/TMBuddySnapshots.exit-code)
          [ "$testExitCode" -eq 0 ] || [ "$testExitCode" -eq 65 ] || exit "$testExitCode"

      - name: Save .xcresult for Snapshots
        uses: actions/upload-artifact@v2
        with:
          name: snapshots-xcresult
          if-no-files-found: error
          path: |
            ${{ env.SNAPSHOTS_XCRESULT }}.tar

      - name: Regenerate Snapshots
        run: |
          . ./Commands/Xcodebuild-env.sh
          stamp=$(mktemp /tmp/RegenerateSnapshots.XXXXXX)
          testExitCode=0
          env \
            TEST_RUNNER_SNAPSHOT_RECORDING=YES \
            \
            xcodebuild test \
            -project Xcodeproj/*-"$PROJECT_KIND".xcodeproj \
            -derivedDataPath "$DERIVED_DATA_PATH" \
            -disableAutomaticPackageResolution \
            -scheme 'TMBuddySnapshots' \
            | xcpretty \
            || testExitCode=${PIPESTATUS[0]}
          [ "$testExitCode" -eq 65 ] || exit "$testExitCode"
          find . -name '*.png' -newer "$stamp" -print0 | xargs -0 tar czf "$REGENERATED_SNAPSHOTS_ARCHIVE"
      
      - name: Save Regenerated Snapshots
        uses: actions/upload-artifact@v2
        with:
          name: regenerated-snapshots
          if-no-files-found: error
          path: |
            ${{ env.REGENERATED_SNAPSHOTS_ARCHIVE }}

      - name: Report Snapshots Failure
        run: |
          testExitCode=$(cat "$XCRESULTS_DIRECTORY"/TMBuddySnapshots.exit-code)
          exit "$testExitCode"
