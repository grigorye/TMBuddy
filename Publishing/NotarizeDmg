#! /bin/bash

set -x
set -euo pipefail
shopt -s expand_aliases

dmg="$1"
shift

outputDir="$1"
shift

secretsDir="$1"
shift

bundleID="$1"
shift

alias PlistBuddy=/usr/libexec/PlistBuddy

secretVariables="$secretsDir/Variables.sh"

# shellcheck disable=SC1091
source "$secretVariables"

loadVariable() {
    local varName="$1"

    shift
    local varValue="${!varName}"

    if [ "$varValue" == "" ]; then
        echo "Variable $varName should be set in $secretVariables."
        exit 1
    fi
    echo "$varValue"
}

####

AuthKeyID=$(loadVariable AuthKeyID)
AuthKeyIssuerID=$(loadVariable AuthKeyIssuerID)

altool() {
    env API_PRIVATE_KEYS_DIR="$secretsDir" \
        xcrun altool \
        --apiKey "$AuthKeyID" \
        --apiIssuer "$AuthKeyIssuerID" \
        "$@"
}

bn=$(basename "$0")

tmpdir=$(mktemp -d /tmp/"$bn.XXXXX")

notarizationResultPlist="$tmpdir/notarization-result.plist"
notarizationStatusPlist="$tmpdir/notarization-status.plist"

status=0
altool \
    --notarize-app \
    --primary-bundle-id "$bundleID" \
    --output-format xml \
    --file "$dmg" \
    >"$notarizationResultPlist" || status="$?"

if [ "$status" != 0 ]; then
    message=$(PlistBuddy -c 'Print product-errors:0:message' "$notarizationResultPlist")

    requestUUID=$(echo "$message"| perl -lne 'print $1 if /ERROR ITMS-90732.*The upload ID is (.*)" at SoftwareAssets/')
    if [ z"$requestUUID" == z ]; then
        exit "$status"
    fi
else
    requestUUID=$(PlistBuddy -c 'Print notarization-upload:RequestUUID' "$notarizationResultPlist")
    message=$(PlistBuddy -c 'Print success-message' "$notarizationResultPlist")
fi

: echo "$message"

while true; do
    altool \
        --notarization-info "${requestUUID}" \
        --output-format xml \
        >"$notarizationStatusPlist"
    
    status=$(PlistBuddy -c 'Print notarization-info:Status' "$notarizationStatusPlist")
    if [ "$status" == "in progress" ]; then
        sleep 10
    else
        break
    fi
done

notarizationLogUrl=$(PlistBuddy -c 'Print notarization-info:LogFileURL' "$notarizationStatusPlist")

if [ "${status}" != "success" ]; then
    if [ z"$notarizationLogUrl" != z"" ]; then
        curl "$notarizationLogUrl"
    fi
    exit 1
fi

cp "$dmg" "$tmpdir"/

while true; do
    xcrun stapler staple -q "$tmpdir"/*.dmg
    status=$?
    if [ "$status" = "65" ]; then
        echo "Waiting for stapling to find record"
        sleep 10
    else
        break
    fi
done

[ "$status" = "0" ]

# spctl --assess --type open --context context:primary-signature -v "$tmpdir"/*.dmg

test -d "$outputDir" || mkdir -p "$outputDir"
mv "$tmpdir"/*.dmg "$outputDir"
